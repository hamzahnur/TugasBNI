#pragma checksum "D:\New folder (6)\TugasBNI\Tugas_BNI\MVC\Views\Transaction\History.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "77a09176ffc65b6a538c7a594d957f0563454f87"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Transaction_History), @"mvc.1.0.view", @"/Views/Transaction/History.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\New folder (6)\TugasBNI\Tugas_BNI\MVC\Views\_ViewImports.cshtml"
using MVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\New folder (6)\TugasBNI\Tugas_BNI\MVC\Views\_ViewImports.cshtml"
using MVC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"77a09176ffc65b6a538c7a594d957f0563454f87", @"/Views/Transaction/History.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7d7a8f56340c239c091cff637a00cc2fdf252300", @"/Views/_ViewImports.cshtml")]
    public class Views_Transaction_History : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\New folder (6)\TugasBNI\Tugas_BNI\MVC\Views\Transaction\History.cshtml"
  

    ViewData["Title"] = "History";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div class=""tab-content"">
    <div class=""p-3"" tabindex=""-1"" role=""dialog"">
        <div class=""row"">
            <h2 class=""page-header"">
                List
                <small>Transaction</small>
            </h2>
        </div>
        <hr>
        <div class=""p-3 table-responsive"" tabindex=""-1"" role=""dialog"">
            <table class=""table align-items-center table-flush"" id=""Transaction"">
                <thead class=""thead-light"">
                    <tr>
                        <th>No</th>
                        <th>ID Transaction</th>
                        <th>ID Item</th>
                        <th>Name Item</th>
                        <th>Type Item</th>
                        <th>Date Transcation</th>
                        <th>Qty</th>
                        <th>Total Cost</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </d");
            WriteLiteral("iv>\r\n</div>\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"

    <script>


        $(document).ready(function () {

            var t = $('#Transaction').DataTable({

                ""filter"": true,
                ""orderMulti"": false,
                ""ajax"": {
                    ""url"": ""/Transaction/GetTransaction"",
                    ""type"": ""get"",
                    ""dataSrc"": ""result"",

                    ""beforeSend"": function (xhr) {
                        xhr.setRequestHeader('Authorization', sessionStorage.token);
                    },
                },
                dom: 'Bfrtip',
                buttons: [
                    {
                        extend: 'csv',
                        exportOptions: {
                            columns: ':visible'
                        }
                    },
                    {
                        extend: 'excel',
                        exportOptions: {
                            columns: ':visible'
                        }
                    },
               ");
                WriteLiteral(@"     {
                        extend: 'pdf',
                        orientation: 'landscape',
                        pageSize: 'A4',
                        footer: true,
                        exportOptions: {
                            columns: ':visible'
                        }
                    },
                    'colvis'
                ],
                ""columnDefs"": [
                    {
                        ""targets"": [0],
                        ""searchable"": false,
                        ""orderable"": false,
                    },
                ],
                ""columns"": [
                    {
                        ""data"": null,
                        ""defaultContent"": '',
                    },
                    { ""data"": 'idTransaction' },
                    { ""data"": 'idItem' },
                    { ""data"": 'name' },
                    { ""data"": 'type' },
                    {
                        ""data"": 'dateTransaction',
        ");
                WriteLiteral(@"                ""render"": function (data) {
                            return moment(data).format(""DD MMMM YYYY"");
                        }
                    },
                    { ""data"": 'qty' },
                    { ""data"": 'totalCost' },
                    {
                        ""data"": ""id"",
                        render: function (data, type, row, meta) {
                            return '<a class=""btn btn-sm btn-danger"" data-toggle=""tooltip"" data-placement=""top"" title=""Delete ' + '""  onclick=""Delete(\'' + row['idTransaction'] + '\')""><i class =""fa fa-edit""></i> Delete</a> ' 
                               
                        }
                    }
                ]
            });

            t.on('order.dt search.dt', function () {
                t.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1;
                    t.cell(cell).invalidate('dom');
                });
            }");
                WriteLiteral(@").draw();
        });

        function Delete(idTransaction) {
            swal.fire({
                title: 'Are you sure you want to delete ' + idTransaction + ' ?',
                text: ""You won't be able to revert this!"",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: ""POST"",
                        url: ""/Transaction/Deletes"",
                        data: { 'idTransaction': idTransaction},
                        ""beforeSend"": function (xhr) {
                            xhr.setRequestHeader('Authorization', sessionStorage.token);
                        },
                        success: function (data) {
                            Swal.fire(
                                'D");
                WriteLiteral(@"eleted!',
                                'Your data has been deleted.',
                                'success'
                            )
                            $('#Transaction').DataTable().ajax.reload();
                        },
                        error: function (error) {
                            alert('error;');
                        },
                    });
                }
            });
        }
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
